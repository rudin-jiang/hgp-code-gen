#include "hgp_hrr.hpp"
#include <vector>

namespace nhfInt {

using VecReal = std::vector<double>;

VecReal hgp_hrr_2_2_(const VecReal &hrrInp, double x, double y, double z) { 
    const double *a2b0 = hrrInp.data() +  0;
    const double *a3b0 = hrrInp.data() +  6;
    const double *a4b0 = hrrInp.data() + 16;

    // intermediate arrays
    double a2b1[18];
    double a3b1[30];

    // resulted VecReal
    VecReal a2b2(36);

    a2b1[ 0] = a3b0[ 0] + z * a2b0[ 0];    // [(002)(001)] = [(003)(000)] + ABz * [(002)(000)]
    a2b1[ 1] = a3b0[ 1] + y * a2b0[ 0];    // [(002)(010)] = [(012)(000)] + ABy * [(002)(000)]
    a2b1[ 2] = a3b0[ 4] + x * a2b0[ 0];    // [(002)(100)] = [(102)(000)] + ABx * [(002)(000)]
    a2b1[ 3] = a3b0[ 1] + z * a2b0[ 1];    // [(011)(001)] = [(012)(000)] + ABz * [(011)(000)]
    a2b1[ 4] = a3b0[ 2] + y * a2b0[ 1];    // [(011)(010)] = [(021)(000)] + ABy * [(011)(000)]
    a2b1[ 5] = a3b0[ 5] + x * a2b0[ 1];    // [(011)(100)] = [(111)(000)] + ABx * [(011)(000)]
    a2b1[ 6] = a3b0[ 2] + z * a2b0[ 2];    // [(020)(001)] = [(021)(000)] + ABz * [(020)(000)]
    a2b1[ 7] = a3b0[ 3] + y * a2b0[ 2];    // [(020)(010)] = [(030)(000)] + ABy * [(020)(000)]
    a2b1[ 8] = a3b0[ 6] + x * a2b0[ 2];    // [(020)(100)] = [(120)(000)] + ABx * [(020)(000)]
    a2b1[ 9] = a3b0[ 4] + z * a2b0[ 3];    // [(101)(001)] = [(102)(000)] + ABz * [(101)(000)]
    a2b1[10] = a3b0[ 5] + y * a2b0[ 3];    // [(101)(010)] = [(111)(000)] + ABy * [(101)(000)]
    a2b1[11] = a3b0[ 7] + x * a2b0[ 3];    // [(101)(100)] = [(201)(000)] + ABx * [(101)(000)]
    a2b1[12] = a3b0[ 5] + z * a2b0[ 4];    // [(110)(001)] = [(111)(000)] + ABz * [(110)(000)]
    a2b1[13] = a3b0[ 6] + y * a2b0[ 4];    // [(110)(010)] = [(120)(000)] + ABy * [(110)(000)]
    a2b1[14] = a3b0[ 8] + x * a2b0[ 4];    // [(110)(100)] = [(210)(000)] + ABx * [(110)(000)]
    a2b1[15] = a3b0[ 7] + z * a2b0[ 5];    // [(200)(001)] = [(201)(000)] + ABz * [(200)(000)]
    a2b1[16] = a3b0[ 8] + y * a2b0[ 5];    // [(200)(010)] = [(210)(000)] + ABy * [(200)(000)]
    a2b1[17] = a3b0[ 9] + x * a2b0[ 5];    // [(200)(100)] = [(300)(000)] + ABx * [(200)(000)]
    a3b1[ 0] = a4b0[ 0] + z * a3b0[ 0];    // [(003)(001)] = [(004)(000)] + ABz * [(003)(000)]
    a3b1[ 3] = a4b0[ 1] + z * a3b0[ 1];    // [(012)(001)] = [(013)(000)] + ABz * [(012)(000)]
    a3b1[ 4] = a4b0[ 2] + y * a3b0[ 1];    // [(012)(010)] = [(022)(000)] + ABy * [(012)(000)]
    a3b1[ 6] = a4b0[ 2] + z * a3b0[ 2];    // [(021)(001)] = [(022)(000)] + ABz * [(021)(000)]
    a3b1[ 7] = a4b0[ 3] + y * a3b0[ 2];    // [(021)(010)] = [(031)(000)] + ABy * [(021)(000)]
    a3b1[10] = a4b0[ 4] + y * a3b0[ 3];    // [(030)(010)] = [(040)(000)] + ABy * [(030)(000)]
    a3b1[12] = a4b0[ 5] + z * a3b0[ 4];    // [(102)(001)] = [(103)(000)] + ABz * [(102)(000)]
    a3b1[13] = a4b0[ 6] + y * a3b0[ 4];    // [(102)(010)] = [(112)(000)] + ABy * [(102)(000)]
    a3b1[14] = a4b0[ 9] + x * a3b0[ 4];    // [(102)(100)] = [(202)(000)] + ABx * [(102)(000)]
    a3b1[15] = a4b0[ 6] + z * a3b0[ 5];    // [(111)(001)] = [(112)(000)] + ABz * [(111)(000)]
    a3b1[16] = a4b0[ 7] + y * a3b0[ 5];    // [(111)(010)] = [(121)(000)] + ABy * [(111)(000)]
    a3b1[17] = a4b0[10] + x * a3b0[ 5];    // [(111)(100)] = [(211)(000)] + ABx * [(111)(000)]
    a3b1[18] = a4b0[ 7] + z * a3b0[ 6];    // [(120)(001)] = [(121)(000)] + ABz * [(120)(000)]
    a3b1[19] = a4b0[ 8] + y * a3b0[ 6];    // [(120)(010)] = [(130)(000)] + ABy * [(120)(000)]
    a3b1[20] = a4b0[11] + x * a3b0[ 6];    // [(120)(100)] = [(220)(000)] + ABx * [(120)(000)]
    a3b1[21] = a4b0[ 9] + z * a3b0[ 7];    // [(201)(001)] = [(202)(000)] + ABz * [(201)(000)]
    a3b1[22] = a4b0[10] + y * a3b0[ 7];    // [(201)(010)] = [(211)(000)] + ABy * [(201)(000)]
    a3b1[23] = a4b0[12] + x * a3b0[ 7];    // [(201)(100)] = [(301)(000)] + ABx * [(201)(000)]
    a3b1[25] = a4b0[11] + y * a3b0[ 8];    // [(210)(010)] = [(220)(000)] + ABy * [(210)(000)]
    a3b1[26] = a4b0[13] + x * a3b0[ 8];    // [(210)(100)] = [(310)(000)] + ABx * [(210)(000)]
    a3b1[29] = a4b0[14] + x * a3b0[ 9];    // [(300)(100)] = [(400)(000)] + ABx * [(300)(000)]
    a2b2[ 0] = a3b1[ 0] + z * a2b1[ 0];    // [(002)(002)] = [(003)(001)] + ABz * [(002)(001)]
    a2b2[ 1] = a3b1[ 3] + y * a2b1[ 0];    // [(002)(011)] = [(012)(001)] + ABy * [(002)(001)]
    a2b2[ 2] = a3b1[ 4] + y * a2b1[ 1];    // [(002)(020)] = [(012)(010)] + ABy * [(002)(010)]
    a2b2[ 3] = a3b1[12] + x * a2b1[ 0];    // [(002)(101)] = [(102)(001)] + ABx * [(002)(001)]
    a2b2[ 4] = a3b1[13] + x * a2b1[ 1];    // [(002)(110)] = [(102)(010)] + ABx * [(002)(010)]
    a2b2[ 5] = a3b1[14] + x * a2b1[ 2];    // [(002)(200)] = [(102)(100)] + ABx * [(002)(100)]
    a2b2[ 6] = a3b1[ 3] + z * a2b1[ 3];    // [(011)(002)] = [(012)(001)] + ABz * [(011)(001)]
    a2b2[ 7] = a3b1[ 6] + y * a2b1[ 3];    // [(011)(011)] = [(021)(001)] + ABy * [(011)(001)]
    a2b2[ 8] = a3b1[ 7] + y * a2b1[ 4];    // [(011)(020)] = [(021)(010)] + ABy * [(011)(010)]
    a2b2[ 9] = a3b1[15] + x * a2b1[ 3];    // [(011)(101)] = [(111)(001)] + ABx * [(011)(001)]
    a2b2[10] = a3b1[16] + x * a2b1[ 4];    // [(011)(110)] = [(111)(010)] + ABx * [(011)(010)]
    a2b2[11] = a3b1[17] + x * a2b1[ 5];    // [(011)(200)] = [(111)(100)] + ABx * [(011)(100)]
    a2b2[12] = a3b1[ 6] + z * a2b1[ 6];    // [(020)(002)] = [(021)(001)] + ABz * [(020)(001)]
    a2b2[13] = a3b1[ 7] + z * a2b1[ 7];    // [(020)(011)] = [(021)(010)] + ABz * [(020)(010)]
    a2b2[14] = a3b1[10] + y * a2b1[ 7];    // [(020)(020)] = [(030)(010)] + ABy * [(020)(010)]
    a2b2[15] = a3b1[18] + x * a2b1[ 6];    // [(020)(101)] = [(120)(001)] + ABx * [(020)(001)]
    a2b2[16] = a3b1[19] + x * a2b1[ 7];    // [(020)(110)] = [(120)(010)] + ABx * [(020)(010)]
    a2b2[17] = a3b1[20] + x * a2b1[ 8];    // [(020)(200)] = [(120)(100)] + ABx * [(020)(100)]
    a2b2[18] = a3b1[12] + z * a2b1[ 9];    // [(101)(002)] = [(102)(001)] + ABz * [(101)(001)]
    a2b2[19] = a3b1[15] + y * a2b1[ 9];    // [(101)(011)] = [(111)(001)] + ABy * [(101)(001)]
    a2b2[20] = a3b1[16] + y * a2b1[10];    // [(101)(020)] = [(111)(010)] + ABy * [(101)(010)]
    a2b2[21] = a3b1[21] + x * a2b1[ 9];    // [(101)(101)] = [(201)(001)] + ABx * [(101)(001)]
    a2b2[22] = a3b1[22] + x * a2b1[10];    // [(101)(110)] = [(201)(010)] + ABx * [(101)(010)]
    a2b2[23] = a3b1[23] + x * a2b1[11];    // [(101)(200)] = [(201)(100)] + ABx * [(101)(100)]
    a2b2[24] = a3b1[15] + z * a2b1[12];    // [(110)(002)] = [(111)(001)] + ABz * [(110)(001)]
    a2b2[25] = a3b1[18] + y * a2b1[12];    // [(110)(011)] = [(120)(001)] + ABy * [(110)(001)]
    a2b2[26] = a3b1[19] + y * a2b1[13];    // [(110)(020)] = [(120)(010)] + ABy * [(110)(010)]
    a2b2[27] = a3b1[17] + z * a2b1[14];    // [(110)(101)] = [(111)(100)] + ABz * [(110)(100)]
    a2b2[28] = a3b1[25] + x * a2b1[13];    // [(110)(110)] = [(210)(010)] + ABx * [(110)(010)]
    a2b2[29] = a3b1[26] + x * a2b1[14];    // [(110)(200)] = [(210)(100)] + ABx * [(110)(100)]
    a2b2[30] = a3b1[21] + z * a2b1[15];    // [(200)(002)] = [(201)(001)] + ABz * [(200)(001)]
    a2b2[31] = a3b1[22] + z * a2b1[16];    // [(200)(011)] = [(201)(010)] + ABz * [(200)(010)]
    a2b2[32] = a3b1[25] + y * a2b1[16];    // [(200)(020)] = [(210)(010)] + ABy * [(200)(010)]
    a2b2[33] = a3b1[23] + z * a2b1[17];    // [(200)(101)] = [(201)(100)] + ABz * [(200)(100)]
    a2b2[34] = a3b1[26] + y * a2b1[17];    // [(200)(110)] = [(210)(100)] + ABy * [(200)(100)]
    a2b2[35] = a3b1[29] + x * a2b1[17];    // [(200)(200)] = [(300)(100)] + ABx * [(200)(100)]

    return a2b2;

}  // function (hgp_hrr_2_2_)

}  // namespace (nhfInt)

